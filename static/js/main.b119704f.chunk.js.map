{"version":3,"sources":["components/header.js","components/Footer.js","actions/dataAction.js","components/DataGrid.js","components/DataList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["header","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Component","Footer","loadData","dispatch","axios","get","then","response","getData","data","slice","type","DataGrid","this","props","dataList","length","map","x","supply","y","priceUsd","z","volumeUsd24Hr","Number","toFixed","price","volume","Grid","item","key","rank","Card","CardContent","container","direction","justify","alignItems","name","symbol","spacing","connect","state","dataAction","DataList","xs","App","React","useState","checkedA","setState","className","FormControlLabel","control","Switch","checked","onChange","event","target","value","label","Boolean","window","location","hostname","match","initialState","mainReducer","action","store","createStore","reducers","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b119704f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { AppBar, Typography, IconButton, Toolbar } from \"@material-ui/core\";\r\n\r\nclass header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              {/*github img */}\r\n            </IconButton>\r\n            <Typography variant=\"h6\">Your Fuse Inc React Dev Test</Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default header;\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div>\r\n      <p>By: Ahmed Ali</p>\r\n      <p>github.com/AhmedAlihashi </p>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport function loadData() {\r\n  return dispatch => {\r\n    return axios.get(\"https://api.coincap.io/v2/assets\").then(response => {\r\n      dispatch(getData(response.data.data.slice(0, 10)));\r\n    });\r\n  };\r\n}\r\n\r\nexport function getData(data) {\r\n  return {\r\n    type: \"GET_DATA\",\r\n    data: data\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Typography, Card, CardContent } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport * as dataAction from \"../actions/dataAction\";\r\n\r\nexport class DataGrid extends Component {\r\n  componentDidMount() {\r\n    this.props.loadData();\r\n  }\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    const dataList = data.length ? (\r\n      data.map(data => {\r\n        let x = data.supply;\r\n        let y = data.priceUsd;\r\n        let z = data.volumeUsd24Hr;\r\n\r\n        let supply = Number(x).toFixed(2);\r\n        let price = Number(y).toFixed(2);\r\n        let volume = Number(z).toFixed(2);\r\n        return (\r\n          <Grid item key={data.rank}>\r\n            <Card>\r\n              <CardContent>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Typography>{data.name}</Typography>\r\n                  <Typography>{data.symbol}</Typography>\r\n                  <Typography>Rank: {data.rank}</Typography>\r\n                </Grid>\r\n\r\n                <Typography color=\"textSecondary\">\r\n                  Price: {price} USD\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">Volume: {volume}</Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  Current Supply:{supply}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })\r\n    ) : (\r\n      <div>Loading....</div>\r\n    );\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        spacing={5}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {dataList}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    data: state.data\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, dataAction)(DataGrid);\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Typography, Card, CardContent } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport * as dataAction from \"../actions/dataAction\";\r\n\r\nexport class DataList extends Component {\r\n  componentDidMount() {\r\n    this.props.loadData();\r\n  }\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    const dataList = data.length ? (\r\n      data.map(data => {\r\n        let x = data.supply;\r\n        let y = data.priceUsd;\r\n        let z = data.volumeUsd24Hr;\r\n\r\n        let supply = Number(x).toFixed(2);\r\n        let price = Number(y).toFixed(2);\r\n        let volume = Number(z).toFixed(2);\r\n        return (\r\n          <Grid xs={10} item key={data.rank}>\r\n            <Card>\r\n              <CardContent>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Typography>{data.name}</Typography>\r\n                  <Typography>{data.symbol}</Typography>\r\n                  <Typography>Rank: {data.rank}</Typography>\r\n                </Grid>\r\n\r\n                <Typography color=\"textSecondary\">\r\n                  Price: {price} USD\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">Volume: {volume}</Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  Current Supply:{supply}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })\r\n    ) : (\r\n      <div>Loading....</div>\r\n    );\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"coloum\"\r\n        spacing={5}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {dataList}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    data: state.data\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, dataAction)(DataList);\r\n","import React from \"react\";\r\nimport { Grid, Switch, FormControlLabel } from \"@material-ui/core\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./components/header\";\r\nimport Footer from \"./components/Footer.js\";\r\nimport DataGrid from \"./components/DataGrid\";\r\nimport DataList from \"./components/DataList\";\r\n\r\nconst App = () => {\r\n  const [state, setState] = React.useState({\r\n    checkedA: false\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div>\r\n        <Grid\r\n          container\r\n          spacing={5}\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Grid item>\r\n              <h2 className=\"bodyTitle\">Crypto Api Checker</h2>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={state.checkedA}\r\n                    onChange={handleChange(\"checkedA\")}\r\n                    value=\"checkedA\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Display Switch\"\r\n              />\r\n            </Grid>\r\n\r\n            <DataGrid />\r\n            {/**   <DataList /> */}\r\n          </Grid>\r\n          <Footer />\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","let initialState = {\r\n  data: 4\r\n};\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n  if (action.type === \"GET_DATA\") {\r\n    return {\r\n      ...state,\r\n      data: action.data\r\n    };\r\n  } else {\r\n    return {\r\n      ...state\r\n    };\r\n  }\r\n};\r\n\r\nexport default mainReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducers from \"./reducers/index\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}